#
# Moodle Development Kit
#
# Copyright (c) 2012 Frédéric Massart - FMCorz.net
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# http://github.com/FMCorz/mdk
#

# This file defines the functions for Bash completion.
#
# To install on Ubuntu, link this file into /etc/bash_completion.d
#     ln -s bash_completion /etc/bash_completion.d/mdk
#     source /etc/bash_completion.d/mdk

function _mdk() {
    local BIN CMD CUR PREV OPTS
    COMPREPLY=()
    BIN="${COMP_WORDS[0]}"
    CUR="${COMP_WORDS[COMP_CWORD]}"
    OPTS=""

    # Helper to list the scripts available to `mdk run`.
    function _list_scripts() {
        local SCRIPTS
        SCRIPTS=$($BIN run --list 2> /dev/null | cut -d ' ' -f 1)
        echo $SCRIPTS
    }

    # Helper to list the instances.
    function _list_instances() {
        local INSTANCES
        INSTANCES=$($BIN info -ln 2> /dev/null)
        echo $INSTANCES
    }

    if [[ "${COMP_CWORD}" == 1 ]]; then
        # List the commands and aliases.
        # Ignoring these commands on purpose: init
        OPTS="alias backport backup behat config create css doctor fix info install js phpunit plugin precheck purge pull push rebase remove run tracker uninstall update upgrade"
        OPTS="$OPTS $($BIN alias list 2> /dev/null | cut -d ':' -f 1)"
    else
        # List of options according to the command.
        CMD="${COMP_WORDS[1]}"
        PREV="${COMP_WORDS[COMP_CWORD-1]}"
        case "${CMD}" in
            alias)
                if [[ "${COMP_CWORD}" == 2 ]]; then
                    OPTS="list show add remove set"
                elif [[ "${COMP_CWORD}" == 3 && "${PREV}" != "add" && "${PREV}" != "list" ]]; then
                    OPTS="$($BIN alias list 2> /dev/null | cut -d ':' -f 1)"
                fi
                ;;
            backport)
                if [[ "$CUR" == -* ]]; then
                    OPTS="--branch --remote --integration --dont-push --dont-fetch --patch --push --push-to --force-push --versions --update-tracker"
                else
                    OPTS="-- $(_list_instances)"
                fi
                ;;
            backup)
                OPTS="--list --info --restore"
                if [[ "${COMP_CWORD}" == 3 && ("${PREV}" == "--restore" || "${PREV}" == "--info") ]]; then
                    OPTS="$($BIN backup --list 2> /dev/null | cut -d ' ' -f 1)"
                elif [[ "${COMP_CWORD}" == 2 && "$CUR"  != -* ]]; then
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            behat)
                if [[ "${PREV}" == "--feature" ]] || [[ "${PREV}" == "-f" ]]; then
                    # Basic autocomplete for --feature, should append a / at the end of directory names.
                    compopt +o nospace
                    OPTS="$(compgen -A file $CUR)"
                    compopt -o nospace
                else
                    OPTS="--run --disable --force --feature --switch-completely --no-javascript --selenium --selenium-download --selenium-verbose --tags"
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            config)
                if [[ "${COMP_CWORD}" == 2 ]]; then
                    OPTS="flatlist list show set"
                elif [[ "${COMP_CWORD}" == 3 && ("${PREV}" == "set" || "${PREV}" == "show") ]]; then
                    OPTS="$($BIN config flatlist 2> /dev/null | cut -d ':' -f 1)"
                fi
                ;;
            create)
                OPTS="--identifier --integration --install --run --version --suffix --engine"
                if [[ "$PREV" == "--engine" ]]; then
                    OPTS='mariadb mysqli pgsql'
                elif [[ "$PREV" == "--run" ]]; then
                    OPTS="$(_list_scripts)"
                fi
                ;;
            css)
                OPTS="--compile --debug --sheets --theme --watch"
                ;;
            doctor)
                OPTS="--all --branch --cached --dependencies --directories --masterbranch --remotes --symlink --wwwroot"
                ;;
            fix)
                if [[ "$PREV" == "-n" || "$PREV" == "--name" ]]; then
                    OPTS=`$BIN info -ln`
                else
                    OPTS="--autofix --name"
                fi
                ;;
            info)
                OPTS="--list --var --edit"
                if [[ "${COMP_CWORD}" == 2 && "$CUR" != -* ]]; then
                    OPTS="$OPTS $(_list_instances)"
                elif [[ "${COMP_CWORD}" == 3 && ("$PREV" == "--list" || "$PREV" == "-l") ]]; then
                    OPTS="--integration --stable --names-only"
                fi
                ;;
            install)
                OPTS="--engine --fullname --run"
                case "$PREV" in
                    -e|--engine)
                        OPTS="mariadb mysqli pgsql"
                        ;;
                    -r|--run)
                        OPTS="$(_list_scripts)"
                        ;;
                    *)
                        if [[ "$CUR" != -* ]]; then
                            OPTS="$OPTS $(_list_instances)"
                        fi
                    ;;
                esac
                ;;
            js)
                OPTS="--plugin --module"
                case "$PREV" in
                    js)
                        OPTS="doc shift"
                        ;;
                    doc)
                        OPTS="$(_list_instances)"
                        ;;
                    *)
                        if [[ "$CUR" != -* ]]; then
                            OPTS="$OPTS $(_list_instances)"
                        fi
                        ;;
                esac
                ;;
            plugin)
                if [[ "${COMP_CWORD}" == 2 ]]; then
                    OPTS="download install"
                else
                    OPTS="--force --strict --no-cache"
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            phpunit)
                if [[ "${PREV}" == "--unittest" ]] || [[ "${PREV}" == "-u" ]]; then
                    # Basic autocomplete for --unittest, should append a / at the end of directory names.
                    compopt +o nospace
                    OPTS="$(compgen -A file $CUR)"
                    compopt -o nospace
                else
                    OPTS="--force --run --testcase --unittest --filter --coverage --testsuite"
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            precheck)
                OPTS="--branch --push"
                ;;
            purge)
                OPTS="--all --integration --stable --manual"
                if [[ "$CUR" != -* ]]; then
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            pull)
                if [[ "${PREV}" == "-m" ]] || "${PREV}" == "--mode"; then
                    OPTS="checkout fetch integration pull testing"
                else
                    OPTS="--fetch-only --integration --no-merge --testing --mode --prompt"
                fi
                ;;
            push)
                if [[ "$PREV" != "--branch" && "$PREV" != "-b" && "$PREV" != "--remote" && "$PREV" != "-r" ]]; then
                    OPTS="--branch --remote --force --include-stable --force-stable --patch --update-tracker"
                    if [[ "$CUR" != -* ]]; then
                        OPTS="$OPTS $(_list_instances)"
                    fi
                fi
                ;;
            rebase)
                if [[ "$PREV" == "rebase" || "$PREV" == "-p" || "$PREV" == "--push" || "$PREV" == "-f" || "$PREV" == "--force-push" ]]; then
                    OPTS="--issues --suffix --versions --push --remote --force-push --update-tracker"
                    if [[ "$CUR" != -* ]]; then
                        OPTS="$OPTS $(_list_instances)"
                    fi
                fi
                ;;
            remove)
                OPTS="$OPTS $(_list_instances)"
                ;;
            run)
                if [[ "${COMP_CWORD}" == 2 ]]; then
                    OPTS="$(_list_scripts)"
                elif [[ "${COMP_CWORD}" == 3 ]]; then
                    OPTS="--integration --stable --all --list $(_list_instances)"
                fi
                ;;
            tracker)
                OPTS="--testing --add-labels --remove-labels --comment"
                ;;
            update)
                OPTS="--integration --stable --all --upgrade --update-cache"
                if [[ "$CUR" != -* ]]; then
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            upgrade)
                OPTS="--integration --stable --all --updade --no-checkout"
                if [[ "$CUR" != -* ]]; then
                    OPTS="$OPTS $(_list_instances)"
                fi
                ;;
            *)
                ;;
        esac
    fi

    COMPREPLY=( $(compgen -W "${OPTS}" -- ${CUR}) )
    return 0
}

# MDK autocomplete
if [[ -n "$(which mdk)" ]]; then
    complete -F _mdk mdk
fi
